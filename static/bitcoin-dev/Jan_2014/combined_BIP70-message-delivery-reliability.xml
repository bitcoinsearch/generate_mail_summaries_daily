<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP70 message delivery reliability</title>
  <updated>2023-05-19T18:04:49.572712+00:00</updated>
  <author>
    <name>Pieter Wuille 2014-01-30 12:02:02</name>
  </author>
  <author>
    <name>Pieter Wuille 2014-01-30 11:46:30</name>
  </author>
  <link href="bitcoin-dev/Jan_2014/004257_BIP70-message-delivery-reliability.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2014/004255_BIP70-message-delivery-reliability.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP70 message delivery reliability</title>
    <updated>2023-05-19T18:04:49.573669+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004257.html" rel="alternate"/>
    <summary>In a conversation between Mike Hearn and Pieter, Mike explains that in Bitcoinj, the transaction is only committed to the wallet if the server accepts the payment message and acknowledges it. If there is a failure submitting or an internal server error, then the transaction wouldn't be retried, and the UI would show that the payment failed. Pieter agrees with this method of implementation as a user, but it is not what is suggested or required by the specification, nor what Bitcoin core master currently implements. In another conversation between Chuck and Mike, Chuck brings up how important it is to talk about failure situations instead of trying to patch on solutions later. A malicious merchant could claim they never received the payment message, or a faulty network connection could cause the message to never be delivered. Pieter adds that even without malicious intent, a payment message could fail to arrive because the server is unreachable. The current specification doesn't suggest retrying, which makes memo and refund addresses useless. Pieter suggests that the specification should do everything possible to prevent transactions confirming without the payment message ever being delivered, such as storing them in the sender's client, retrying when necessary, and using exponential backoff.</summary>
    <published>2014-01-30T12:02:02+00:00</published>
  </entry>
</feed>
