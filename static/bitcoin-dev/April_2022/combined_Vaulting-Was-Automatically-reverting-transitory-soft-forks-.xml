<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Vaulting (Was: Automatically reverting ("transitory") soft forks)</title>
  <updated>2023-05-22T19:39:15.760697+00:00</updated>
  <author>
    <name>Matt Corallo 2022-04-23 18:24:01</name>
  </author>
  <author>
    <name>Russell O'Connor 2022-04-22 17:25:12</name>
  </author>
  <link href="bitcoin-dev/April_2022/020299_Vaulting-Was-Automatically-reverting-transitory-soft-forks-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2022/020284_Vaulting-Was-Automatically-reverting-transitory-soft-forks-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Vaulting (Was: Automatically reverting ("transitory") soft forks)</title>
    <updated>2023-05-22T19:39:15.760697+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020299.html" rel="alternate"/>
    <summary>The discussion on bitcoin-dev mailing list revolves around the security assumptions of CTV-based vaults. The concern raised is that an attacker who steals the hot key can wait for the user to unvault their funds and then race/outspend the user's transaction with their own, which is expected to happen in the dark forest. However, a key security assumption of the CTV-based vaults is that you must not withdraw more in one go than your hot wallet risk tolerance. This attack isn't worse than simply stealing the hot wallet key immediately after a withdraw. There are some frustrating limitations like rotating all of your CTV outputs if you ever get a hot wallet key stolen, and your CTV outputs must never be any larger than your hot wallet risk tolerance amount. The simple-ctv-vault design is considered a good benchmark for evaluating covenant proposals because it is simple and has high utility for many users of Bitcoin. However, there are no implementations, tooling, and in some cases even complete specifications available currently. The unvault step is critical because it allows detecting unexpected behavior. If an attacker had stolen the hot wallet keys, their only choice to succeed in the theft is to trigger an unvault. But, it's not the attackers' only choice to succeed. They have the option to wait for the user to unvault their funds of their own accord and then race/outspend the user's transaction with their own. In MES vault design, the destination address is included and committed to by the unvaulting step, but this can only be achieved with a less constrained design for covenants. The damage from a hot key theft could be more contained under some circumstances using a CTV vault, but the value of the CTV vault should not be overstated. Moreover, the issues already noted by the document regarding fee management would likely also benefit from a less constrained design for covenants.</summary>
    <published>2022-04-23T18:24:01+00:00</published>
  </entry>
</feed>
