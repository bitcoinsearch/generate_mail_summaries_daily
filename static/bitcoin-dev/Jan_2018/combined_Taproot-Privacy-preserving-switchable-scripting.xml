<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Taproot: Privacy preserving switchable scripting</title>
  <updated>2023-05-20T04:55:18.097330+00:00</updated>
  <author>
    <name>Anthony Towns 2018-01-23 22:22:29</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-01-23 21:38:13</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-01-23 13:15:38</name>
  </author>
  <author>
    <name>Anthony Towns 2018-01-23 06:44:19</name>
  </author>
  <author>
    <name>Matt Corallo 2018-01-23 02:51:51</name>
  </author>
  <author>
    <name>Matt Corallo 2018-01-27 17:23:12</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-01-26 21:34:39</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-01-23 22:45:06</name>
  </author>
  <author>
    <name>Matt Corallo 2018-01-23 21:23:21</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-01-23 00:30:06</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-05 09:27:07</name>
  </author>
  <link href="bitcoin-dev/Jan_2018/015632_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015629_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015620_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015619_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015616_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015663_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015661_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015634_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015627_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015614_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015703_Taproot-Privacy-preserving-switchable-scripting.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Taproot: Privacy preserving switchable scripting</title>
    <updated>2023-05-20T04:55:18.097330+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015632.html" rel="alternate"/>
    <summary>The bitcoin-dev mailing list has been discussing the implementation of taproot and merkelized scriptPubKeys (MAST) in Bitcoin. The main concern is whether paying directly to a public key instead of a public key hash would be a step backward regarding resistance to quantum attacks against ECC. Gregory Maxwell argues that hashing provides little quantum resistance, and there is an argument to use the public key directly when collision resistance is needed for taproot. Direct SPK use is also advantageous for efficiently ZKP over the UTXO set with private solvency proofs.Anthony Towns raises concerns about paying directly to a public key, suggesting it is not enough to make pay-to-taproot cheaper than p2wpkh. He suggests adding a small penalty/discount to align with economic incentives. The discussion concludes by agreeing that indistinguishable contracts for privacy preservation are essential. It is proposed to tweak C to produce P, which is the key we'll publish, and then pay to a scriptPubKey of [Taproot supporting version] [EC point P].The proposal for Taproot, a special delegating CHECKSIG, allows a top level "threshold-signature OR arbitrary-conditions" to be made indistinguishable from a normal one-party signature without any overhead at all. This construction enables the largest possible anonymity set for fixed party smart contracts by making them look like the simplest possible payments. It allows participants to jointly form a 2 of 2 signature, and spend as if it were a payment to a single party.The discussion on the use of merkelized scriptPubKeys is focused on efficiency and privacy. The author suggests using a special delegating CHECKSIG called Taproot that can make threshold-signature OR arbitrary-conditions look indistinguishable from a one-party signature with no overheads. An example is given where a coin can be redeemed by two parties, Alice and Bob, or by CSV-timelock and Bob. It is noted that interesting scripts have a logical top-level branch that allows satisfaction of the contract with nothing other than a signature by all parties, and other branches would only be used where some participant is failing to cooperate. Contracts with a fixed finite participant set can be represented as an OR between an N-of-N and more complex contract. The special case of a top-level "threshold-signature OR arbitrary-conditions" can be made indistinguishable from a normal one-party signature.The use of merkelized scriptPubKeys is driven by efficiency and privacy concerns. A suggestion has been made to make contracts indistinguishable from normal one-party signatures to increase anonymity sets. This can be achieved with Taproot, a special delegating CHECKSIG. The verification computational complexity of signature path is obviously the same as any other plain signature.Lastly, the email thread mentions recursive Taproot and the idea of supporting additional simple preconditions, such as CSV/CLTV predicate, for nesting interior nested keys, but questions whether there are other simple predicates that cover a lot of cases. Taproot composes well with whatever other merkelized script system is used, as the S can be whatever kind of data is wanted, including the root of some tree.</summary>
    <published>2018-01-23T22:22:29+00:00</published>
  </entry>
</feed>
