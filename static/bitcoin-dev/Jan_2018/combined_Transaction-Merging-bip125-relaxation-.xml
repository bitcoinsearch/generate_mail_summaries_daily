<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Transaction Merging (bip125 relaxation)</title>
  <updated>2023-05-20T05:02:40.056378+00:00</updated>
  <author>
    <name>Gregory Maxwell 2018-01-23 22:49:34</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-01-23 21:31:00</name>
  </author>
  <link href="bitcoin-dev/Jan_2018/015635_Transaction-Merging-bip125-relaxation-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2018/015628_Transaction-Merging-bip125-relaxation-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Transaction Merging (bip125 relaxation)</title>
    <updated>2023-05-20T05:02:40.056378+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015635.html" rel="alternate"/>
    <summary>A bitcoin developer has raised concerns about the incentive incompatibility of bip125, arguing that it is irrational to accept a replacement transaction of lower fee rate if we are assuming a competitive mempool. However, the text of the BIP document is confusing and it actually requires an increase in the fee rate for replacement transactions. Another developer has questioned the claim that most bitcoin transactions have change, noting that it is quite easy to get no change with a not-dumb algorithm selecting coins if there are a decent number of outputs well under the value being paid. The number of ways n choose m combines grows exponentially, so you only need to get close enough over the right value so that you're paying excess fees equal or less than the cost of the change. Efficient algorithms for finding these solutions for Bitcoin core are currently being developed by Achow101 and Murch.</summary>
    <published>2018-01-23T22:49:34+00:00</published>
  </entry>
</feed>
