<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)</title>
  <updated>2023-05-20T20:37:13.820027+00:00</updated>
  <author>
    <name>Anthony Towns 2019-06-20 22:05:52</name>
  </author>
  <author>
    <name>Anthony Towns 2019-06-05 09:30:39</name>
  </author>
  <link href="bitcoin-dev/June_2019/017036_OP-SECURETHEBAG-supersedes-OP-CHECKOUTPUTSVERIFY-.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2019/017006_OP-SECURETHEBAG-supersedes-OP-CHECKOUTPUTSVERIFY-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - OP_SECURETHEBAG (supersedes OP_CHECKOUTPUTSVERIFY)</title>
    <updated>2023-05-20T20:37:13.820027+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017036.html" rel="alternate"/>
    <summary>A proposal for simulating OP_SECURETHEBAG with an ANYPREVOUT (NOINPUT) sighash is discussed in this context. The proposed method involves calculating an ANYPREVOUT sighash for SIGHASH_ANYPREVOUTANYSCRIPT | SIGHASH_ALL, and making the script "CHECKSIG". This method loses the ability to commit to the number of inputs or restrict the nsequence of other inputs, and requires a bigger script. However, both scripts are automatically satisfied when revealed with the correct set of outputs and do not need any additional witness data. The possibility of constructing "X" via script instead of hardcoding a value is also discussed. Furthermore, it is mentioned that OP_CHECKOUTPUTSHASHVERIFY is retracted in favor of OP_SECURETHEBAG. To make it fit in with the existing opcode naming, it is suggested to call it "OP_CHECKTXDIGESTVERIFY" and pull a 33-byte value from the stack, consisting of a sha256 hash and a sighash-byte. A new sighash value corresponding to the set of info to be included in the hash can be added. However, there doesn't seem to be any reason to complicate the spec to ensure the digest is precommitted as part of the opcode.</summary>
    <published>2019-06-20T22:05:52+00:00</published>
  </entry>
</feed>
