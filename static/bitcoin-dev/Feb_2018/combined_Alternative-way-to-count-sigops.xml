<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Alternative way to count sigops</title>
  <updated>2023-05-20T05:14:05.136065+00:00</updated>
  <author>
    <name>Johnson Lau 2018-02-16 22:49:17</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-02-17 02:33:32</name>
  </author>
  <link href="bitcoin-dev/Feb_2018/015764_Alternative-way-to-count-sigops.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015765_Alternative-way-to-count-sigops.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Alternative way to count sigops</title>
    <updated>2023-05-20T05:14:05.136065+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015764.html" rel="alternate"/>
    <summary>The current method of counting signature operations (sigops) in Bitcoin is not accurate and does not account for all factors, leading to overestimation of costs and potential for DoS attacks. BIP114, taproot, and other second-generation script proposals allow for static sigop counting, but this may not be feasible as more complicated script functions are introduced. A new proposal suggests counting actual sigops at execution and ensuring that the number of executed sigops multiplied by 50 does not exceed the size of the input. This would provide a per-input limit to avoid unexpected DoS attacks while allowing for more complex scripts. The relay node can determine if a transaction spends too much CPU power by examining its size and terminate script execution early if necessary.</summary>
    <published>2018-02-16T22:49:17+00:00</published>
  </entry>
</feed>
