<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Graftroot: Private and efficient surrogate scripts under the taproot assumption</title>
  <updated>2023-05-20T05:08:33.841256+00:00</updated>
  <author>
    <name>Gregory Maxwell 2018-02-05 05:58:43</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-02-24 18:58:59</name>
  </author>
  <author>
    <name>Gregory Maxwell 2018-02-05 19:58:24</name>
  </author>
  <link href="bitcoin-dev/Feb_2018/015700_Graftroot-Private-and-efficient-surrogate-scripts-under-the-taproot-assumption.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015790_Graftroot-Private-and-efficient-surrogate-scripts-under-the-taproot-assumption.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2018/015702_Graftroot-Private-and-efficient-surrogate-scripts-under-the-taproot-assumption.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Graftroot: Private and efficient surrogate scripts under the taproot assumption</title>
    <updated>2023-05-20T05:08:33.841256+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html" rel="alternate"/>
    <summary>The concept of graftroot has been introduced as an improvement to taproot. While taproot provides for only one alternative natively, graftroot allows for an unlimited number of alternatives that are executed with equal efficiency to a single alternative, and the number of them is hidden without overhead. Participants establish a threshold key, optionally with a taproot alternative, just as they do with taproot. They can delegate their ability to sign to a surrogate script by signing that script with their taproot key and sharing that delegation with whomever they choose. The non-interactive schnorr aggregation trick reduces the overhead to ~32 bytes-- the same as taproot. This approach requires anyone who wants to make use of a particular surrogate to interact with the participants and store the resulting signature because a single party couldn't compute it again on their own from public data. The primary advantage of graftroot is that it scales to any number of alternatives with small constant overhead, can be delegated after the fact, and can still be spent by the participants without overhead.In cases where the taproot assumption doesn't hold, taproot can still be used by setting the public key to a NUMS point, which preserves privacy. A similar thing can be done for graftroot if the signature is not a proof of knowledge (commits to the public key): you select the signature in a NUMS manner and then recover the applicable public key. Graftroot provides for unilateral key rotation (to a previously unknown key), without invalidating the interests of other parties in the existing multisig, at the cost of storing the signed delegation.</summary>
    <published>2018-02-05T05:58:43+00:00</published>
  </entry>
</feed>
