<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - On the security of softforks</title>
  <updated>2023-05-19T23:00:06.908642+00:00</updated>
  <author>
    <name>Pieter Wuille 2015-12-18 02:30:38</name>
  </author>
  <author>
    <name>Anthony Towns 2015-12-18 06:12:23</name>
  </author>
  <link href="bitcoin-dev/Dec_2015/012014_On-the-security-of-softforks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2015/012021_On-the-security-of-softforks.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - On the security of softforks</title>
    <updated>2023-05-19T23:00:06.908642+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012014.html" rel="alternate"/>
    <summary>The author of this post discusses the security implications of soft forks on old full nodes. They analyze the potential failure modes and argue that the security reduction is not large. The first concern is whether an old full node wallet will accept a transaction that is invalid to new rules. However, this is not a problem because the receiver wallet chooses what address/script to accept coins on, and they will upgrade to the new soft fork rules before creating an address that depends on the soft fork's features.The second issue is the risk of an old full node wallet accepting a transaction whose coins passed through a script that depends on the soft forked rules. This is common for all anyonecanspend transactions, which are legal today in the blockchain. To solve this problem, incoming transactions can be marked as "uncertain history" in the wallet if they have an anyonecanspend transaction with less than 6 confirmations in their history.The third and fourth concerns are related to SPV node wallets accepting unconfirmed or confirmed transactions that are invalid to new nodes. Defrauding an SPV wallet with an invalid unconfirmed transaction doesn't change with the introduction of new consensus rules, as they don't validate them anyway. In the case the client trusts the full node peer(s) it is connected to do validation before relay, nodes can either indicate (service bit or new p2p message) which soft forks are accepted or rely on the new rules being non-standard even to old full nodes.Despite the small security reduction, the post argues that soft forks offer security advantages over hard forks. Soft forks do not require the pervasive consensus that hard forks need, and they can be deployed without knowing when all full nodes will adopt the rule or whether they will ever adopt it at all. Hard fork coordination has a centralizing effect on development, whereas soft forks support having multiple independent consensus changes being proposed.Pieter Wuille, a Bitcoin developer, has discussed the potential risks associated with soft forks. In a message on the Bitcoin development mailing list, he outlined one of the key risks: a risk that an old full node wallet accepts a transaction that is invalid to the new rules. As a solution to this problem, Wuille suggested upgrading software regularly. However, if users are concerned about the security degradation a soft fork might bring, they can configure their nodes to treat (signalled) soft forks as hard forks, and stop processing blocks if a soft fork condition is detected.Mallory, a hacker, creates a transaction paying to a segwit script. Non-upgraded nodes and miners will refuse to forward or mine this transaction but the upgraded nodes and miners will forward and mine it. It will be included in the blockchain by upgraded miners fairly soon, and then in the UTXO set of non-upgraded miners and nodes too.</summary>
    <published>2015-12-18T02:30:38+00:00</published>
  </entry>
</feed>
