<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Generalised taproot</title>
  <updated>2023-05-20T17:29:19.960050+00:00</updated>
  <author>
    <name>Anthony Towns 2018-07-13 01:51:57</name>
  </author>
  <author>
    <name>Pieter Wuille 2018-10-24 02:22:24</name>
  </author>
  <link href="bitcoin-dev/July_2018/016249_Generalised-taproot.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2018/016461_Generalised-taproot.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Generalised taproot</title>
    <updated>2023-05-20T17:29:19.960050+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016249.html" rel="alternate"/>
    <summary>In a recent email thread among Bitcoin developers, Gregory Maxwell raised concerns about the usefulness of recursive taproot structure in an upcoming protocol upgrade called Taproot. Taproot is designed to embed spending conditions into the public key and has been praised for its privacy benefits since all spending conditions are hidden behind the public key. Andrew Poelstra responded to Maxwell's concerns with a detailed solution using Pedersen Commitments.Poelstra's proposed solution involves using two secrets and three public keys to hide spending conditions until they are met. This provides more privacy than the basic taproot structure. According to Poelstra, this solution could potentially be more efficient than the merkle tree structure of taproot in cases where the common case is to spend with conditions.Another Bitcoin Core developer, Pieter Wuille, proposed a new construction called g'root. This construction aims to offer an easy way to construct a soft-fork-safe cross-input aggregation system and is based on recursive Pederson commitments. Spending conditions are policies that take the form of "sign with public key A and additionally satisfy script S." Each condition is associated with a point P = A + s*G2, where G2 is a second independent generator for the curve, and s=H(S).A scriptPubKey (or redeemScript in case of P2SH) can either directly be a spending condition P or a P2C derivation of a spending condition and an alternative. That alternative can either be another P2C derivation ("recursive Taproot"), or a Merkle tree of disjunct spending conditions. These developments in the Bitcoin protocol upgrade show promising progress towards improving privacy and security for Bitcoin users.</summary>
    <published>2018-07-13T01:51:57+00:00</published>
  </entry>
</feed>
