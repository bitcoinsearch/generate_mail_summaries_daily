<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP Proposal: The Great Consensus Cleanup</title>
  <updated>2023-05-20T19:55:03.074730+00:00</updated>
  <author>
    <name>Matt Corallo 2019-03-06 21:39:15</name>
  </author>
  <author>
    <name>Matt Corallo 2019-03-07 19:44:23</name>
  </author>
  <link href="bitcoin-dev/March_2019/016714_BIP-Proposal-The-Great-Consensus-Cleanup.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2019/016721_BIP-Proposal-The-Great-Consensus-Cleanup.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP Proposal: The Great Consensus Cleanup</title>
    <updated>2023-05-20T19:55:03.074730+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016714.html" rel="alternate"/>
    <summary>Bitcoin Improvement Proposal (BIP) 324 has been proposed to make several changes to the Bitcoin protocol, including improving its efficiency and security. The proposal aims to simplify Bitcoin implementations, reduce worst-case validation times, and fix long-standing vulnerabilities. The BIP includes disabling the OP_CODESEPARATOR and FindAndDelete functions, reducing the valid scriptSigs to a minimal set of operations, disabling non-canonical sighash types, removing the timewarp vulnerability, and preventing confusion between leaf nodes and inner nodes in the transaction Merkle tree. The BIP will be deployed using version bits BIP9 with the name "cleanups" and will start on August 1st, 2019 (mainnet) and June 1st, 2019 (testnet). The proposal also ensures that nTime fields move forward during difficulty adjustment and allows them to go backwards by 600 seconds to prevent malicious miners from preventing competitors from mining the next block. It is recommended that SPV clients enforce the new nTime rules to avoid following any potential forks that may occur. Additionally, transactions smaller than 83 bytes are considered non-standard since Bitcoin Core version 0.17.0, so miners will not mine blocks that violate this rule by default.The proposal does not affect early-stage proposals such as Schnorr signatures, Taproot, Graftroot, and MAST, as they are likely to only apply to SegWit scripts, which are not covered by any of the new rules except for the sighash type byte rule. The BIP9 soft-fork is proposed to ensure that miners have upgraded to enforce new rules, minimizing disruption. However, if miners have not yet signaled sufficient readiness, an activation method may be used at a later date. A reference implementation for BIP 324 is available on GitHub.The proposed BIP also aims to fix the time warp vulnerability in Bitcoin Core. The changes include disallowing non-standard signature hash types, invalidating transactions smaller than 65 bytes without witness data, and enforcing increasing timestamps against the median-timestamp-of-last-11-blocks. It has been recommended that SPV clients enforce the new nTime rules to avoid following any potential forks which may occur. Early-stage proposals such as Schnorr signatures, Taproot, Graftroot, and MAST are not expected to interact with the changes in this proposal.The BIP proposes several changes, including enabling signature hash caching on a per-input basis to reduce worst-case validation time for non-BIP 143 transactions, fixing the "timewarp" inflation vulnerability in Bitcoin's difficulty adjustment without risking existing mining hardware becoming unusable, and resolving several vulnerabilities where Bitcoin clients needed to check for specific cases of malleation in the Merkle tree construction by making certain transaction sizes invalid. The BIP also proposes disallowing non-standard sighash types to limit the number of potential signature hashes that could be used per-input, which would allow caching to avoid re-calculation. However, some have suggested that most of the same effect could be achieved by caching the just-before-the-last-byte sighash midstate and hashing only the last byte when checking signatures. Lastly, there is a link to an old post about extension blocks.</summary>
    <published>2019-03-06T21:39:15+00:00</published>
  </entry>
</feed>
