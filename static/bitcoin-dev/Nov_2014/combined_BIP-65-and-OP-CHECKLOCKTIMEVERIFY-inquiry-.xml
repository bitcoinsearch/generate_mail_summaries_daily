<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP 65 and OP_CHECKLOCKTIMEVERIFY inquiry...</title>
  <updated>2023-05-19T19:33:35.208178+00:00</updated>
  <author>
    <name>Gregory Maxwell 2014-11-28 12:03:52</name>
  </author>
  <author>
    <name>Gregory Maxwell 2014-11-27 23:46:23</name>
  </author>
  <link href="bitcoin-dev/Nov_2014/006953_BIP-65-and-OP-CHECKLOCKTIMEVERIFY-inquiry-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2014/006948_BIP-65-and-OP-CHECKLOCKTIMEVERIFY-inquiry-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP 65 and OP_CHECKLOCKTIMEVERIFY inquiry...</title>
    <updated>2023-05-19T19:33:35.208178+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-November/006953.html" rel="alternate"/>
    <summary>In a discussion about BIP 65 regarding the OP_CHECKLOCKTIMEVERIFY, Richard Moore suggested using an OP_CHECKLOCKTIME to push an OP_TRUE or OP_FALSE onto the stack. However, updating the stack is not soft-fork compatible and would immediately fork the network. Additionally, having an invertible test is also not soft-fork compatible as it could cause older nodes to see it as passing even when it was required for non-forking the network in non-inverted cases. To get non-nullable true/false behavior without these risks, they can have the VERIFY test inside a branch and have the signer provide its falseness as an input to the branch. A useful and powerful mental model is that SCRIPT is not running a program, but instead, the signer is proving to the network that they know inputs that make the program return true. The recommended approach is to use OP_IF OP_CHECKLOCKTIMEVERIFY OP_ELSE OP_END.Moore also suggested allowing an opcode that would use similar semantics against an item in the stack rather than relying on nLockTime in a transaction. However, this would break existing invariants and make the coins potentially less fungible because they wouldn't be reorg safe. Having locktime validity that is basically monotonic is a useful intentional property.</summary>
    <published>2014-11-28T12:03:52+00:00</published>
  </entry>
</feed>
