<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Simplicity: An alternative to Script</title>
  <updated>2023-05-20T04:14:42.347235+00:00</updated>
  <author>
    <name>Matt Corallo 2017-10-30 22:50:04</name>
  </author>
  <author>
    <name>Gregory Maxwell 2017-10-30 23:29:28</name>
  </author>
  <author>
    <name>Matt Corallo 2017-10-30 22:14:44</name>
  </author>
  <author>
    <name>Matt Corallo 2017-10-30 21:42:44</name>
  </author>
  <link href="bitcoin-dev/Oct_2017/015226_Simplicity-An-alternative-to-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2017/015227_Simplicity-An-alternative-to-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2017/015224_Simplicity-An-alternative-to-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2017/015222_Simplicity-An-alternative-to-Script.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Simplicity: An alternative to Script</title>
    <updated>2023-05-20T04:14:42.347235+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-October/015226.html" rel="alternate"/>
    <summary>Russell O'Connor has presented Simplicity, a new alternative to Bitcoin Script, at the PLAS 2017 Workshop on Programming Languages and Analysis for Security. Simplicity is designed to operate at the consensus layer and is a low-level, typed, functional, native MAST language where programs are built from basic combinators. It comes with formal denotational semantics and formal operational semantics which are both formalized in the Coq proof assistant and proven equivalent. Simplicity also includes easy to compute static analyses that can compute bounds on the space and time resources needed for evaluation. As a native MAST language, unused branches of Simplicity programs are pruned at redemption time. To make Simplicity practical, jets replace common Simplicity expressions and directly implement them with C code. Russell anticipates developing a broad set of useful jets covering arithmetic operations, elliptic curve operations, and cryptographic operations including hashing and digital signature validation. However, Matt Corallo raised concerns about how Simplicity would deal with "jets" in something like Bitcoin. Other similar systems use hard-forks to reduce the sigops/weight/fee-cost of transactions every time they want to add useful optimized drop-ins. Russell replied by saying script versions make this no longer a hard-fork to do. The script version would implicitly encode which jets are optimized, and what their optimized cost is. He also mentioned it is possible to support a standard library of jets that are general purpose enough to allow the validation of new crypto primitives. There are three related ideas around consensus discounted jets: whether a particular script-root is jetted or not, whether a particular script-root is standard and known in the P2P network, and whether a particular jet is discounted and what the discounts are. These decisions can be made by node operators, who may choose to validate code that exceeds their effort limits on a probabilistic and best-effort basis. Simplicity is an alternative to Bitcoin Script, designed to be highly amenable to the formal analysis of smart contracts written in it. It consists of a collection of high-level operations and combinators at the level of things in Bitcoin Script, implemented as discounted jets. Simplicity provides a rigorous base which can potentially be used to build whatever future direction of script we like out of; by itself, it does not mandate a particular depth or level of adoption. For the moment, it is still mostly just a base and typical smart contracting end users may not program directly with simplicity even if Bitcoin supports arbitrary simplicity. Rather, they may program in user-friendly domain-specific languages which are formally tied to their implementations in simplicity that allow closed loop formal reasoning about their contracts all the way from their high-level business rules straight through to the machine code implementing the interpreter(s) that run in the network. The challenge is to prove in practice that this is actually workable.Russell O'Connor has presented a design for an alternative to Bitcoin Script called Simplicity. Simplicity is a low-level, typed, functional, native MAST language that operates at the consensus layer and comes with formal denotational semantics and formal operational semantics, which are both formalized in the Coq proof assistant and proven equivalent. The final design of Simplicity includes extensions not covered in the paper, including full convent support, supporting signature aggregation and delegation. Simplicity is still in the research and development phase and will be made available in the Elements project after an SDK is complete. After extensive vetting, it may be suitable for inclusion in Bitcoin.</summary>
    <published>2017-10-30T22:50:04+00:00</published>
  </entry>
</feed>
