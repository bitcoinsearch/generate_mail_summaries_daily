<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - New serialization/encoding format for key material</title>
  <updated>2023-05-20T16:34:24.166429+00:00</updated>
  <author>
    <name>Gregory Maxwell 2018-05-30 14:08:08</name>
  </author>
  <author>
    <name>Pieter Wuille 2018-06-23 19:49:54</name>
  </author>
  <author>
    <name>Pieter Wuille 2018-06-13 02:44:47</name>
  </author>
  <author>
    <name>Pieter Wuille 2018-06-03 19:23:17</name>
  </author>
  <author>
    <name>Jonas Schnelli 2018-06-03 16:51:09</name>
  </author>
  <link href="bitcoin-dev/May_2018/016043_New-serialization-encoding-format-for-key-material.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2018/016152_New-serialization-encoding-format-for-key-material.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2018/016112_New-serialization-encoding-format-for-key-material.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2018/016066_New-serialization-encoding-format-for-key-material.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2018/016065_New-serialization-encoding-format-for-key-material.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - New serialization/encoding format for key material</title>
    <updated>2023-05-20T16:34:24.166429+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-May/016043.html" rel="alternate"/>
    <summary>In a discussion on bitcoin-dev mailing list, a proposal to add birthday and gap limit to keys was discussed. However, it was pointed out that adding birthday to keys would break the basic property of visually comparing two keys to determine if they are same. It was also mentioned that different wallet software could set different birthday/gap limits which would create different xpub/xprv for the same set of mathematically derived individual keys, thereby removing decoupling between key and wallet metadata.Regarding error correction in codes designed for length 341, Russell O'Connor presented the trade-off between code length and recovery properties. He suggested supporting multiple checksum variants to cater to varying user storage mediums. Later, Pieter presented some numbers showing the number of correctable errors including errors inside the checksum characters themselves. He provided reference source code for constructing any of these codes. Jonas Schnelli expressed interest in constructing a code + implementation for these.Pieter raised concerns about the use of Bech32 for error correction, stating that it can only efficiently correct one error up to length 1023. Instead, he suggests designing other base32 BCH codes with different properties. He provides examples of codes designed for lengths 93 and 341 which can correct multiple errors with varying numbers of checksum characters. Pieter offers to construct a code and implementation for any of these if there is interest.Jonas Schnelli shares a BIP proposal for bech32-based keys and provides reference C code. Feedback is welcome.</summary>
    <published>2018-05-30T14:08:08+00:00</published>
  </entry>
</feed>
