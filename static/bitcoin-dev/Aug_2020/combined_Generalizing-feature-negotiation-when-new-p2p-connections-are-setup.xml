<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Generalizing feature negotiation when new p2p connections are setup</title>
  <updated>2023-05-20T23:46:34.649354+00:00</updated>
  <author>
    <name>Suhas Daftuar 2020-08-14 19:28:41</name>
  </author>
  <author>
    <name>Matt Corallo 2020-08-21 22:16:02</name>
  </author>
  <author>
    <name>Matt Corallo 2020-08-21 20:45:26</name>
  </author>
  <author>
    <name>Matt Corallo 2020-08-18 18:25:26</name>
  </author>
  <author>
    <name>Suhas Daftuar 2020-08-24 09:44:07</name>
  </author>
  <author>
    <name>Anthony Towns 2020-08-21 02:36:47</name>
  </author>
  <author>
    <name>Matt Corallo 2020-08-18 17:26:36</name>
  </author>
  <author>
    <name>Matt Corallo 2020-08-18 14:59:00</name>
  </author>
  <author>
    <name>Suhas Daftuar 2020-08-17 20:40:02</name>
  </author>
  <link href="bitcoin-dev/Aug_2020/018084_Generalizing-feature-negotiation-when-new-p2p-connections-are-setup.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2020/018127_Generalizing-feature-negotiation-when-new-p2p-connections-are-setup.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2020/018123_Generalizing-feature-negotiation-when-new-p2p-connections-are-setup.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2020/018101_Generalizing-feature-negotiation-when-new-p2p-connections-are-setup.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2020/018133_Generalizing-feature-negotiation-when-new-p2p-connections-are-setup.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2020/018112_Generalizing-feature-negotiation-when-new-p2p-connections-are-setup.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2020/018098_Generalizing-feature-negotiation-when-new-p2p-connections-are-setup.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2020/018097_Generalizing-feature-negotiation-when-new-p2p-connections-are-setup.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2020/018092_Generalizing-feature-negotiation-when-new-p2p-connections-are-setup.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Generalizing feature negotiation when new p2p connections are setup</title>
    <updated>2023-05-20T23:46:34.650388+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-August/018084.html" rel="alternate"/>
    <summary>The Bitcoin protocol has evolved to include many different clients with varying features, which the original protocol is inadequate in capturing. The Bitcoin network has always expected clients to ignore unknown messages, so it makes sense to have an explicit negotiation phase where clients send a list of features they support before verack. This will allow for consistency and avoid any network splits that may occur due to incompatible clients being upgraded over time.A proposal was made by Suhas Daftuar to codify the idea that Bitcoin network clients should ignore unknown messages received before verack, and a draft of the proposal is available on Github. Eric Voskuil responded, stating that ignoring unknown messages is not good protocol design, but rather changes to version negotiation should be made to determine the set of valid messages. The only limitation presented by versioning is that the system is sequential, but this can be resolved by making new features optional at the new protocol level, allowing each client to limit its communication to the negotiated protocol and ignore unsupported/disabled features.Matt and Jeremy have also proposed different ideas for how to negotiate features between nodes. Matt suggests continuing the current pattern of sending a message indicating support for a given feature and building additional messages for feature negotiation as they become necessary. Jeremy proposes using HANDSHAKEACK instead of VERACK and adding a SYNC message to allow multi-round negotiation.Despite some disagreements among developers about the best approach, the proposal remains valuable for future protocol upgrades that would benefit from feature negotiation at the time of connection. It would make sense to have an explicit negotiation phase - after version and before verack, just send the list of features that you support to negotiate what the connection will be capable of. The exact way this negotiation occurs doesn't matter much, but sending it as a stream of messages which each indicate support for a given protocol feature perfectly captures the pattern that has been used in several recent network upgrades, keeping consistency.</summary>
    <published>2020-08-14T19:28:41+00:00</published>
  </entry>
</feed>
