<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Schnorr and taproot (etc) upgrade</title>
  <updated>2023-05-20T19:39:26.880055+00:00</updated>
  <author>
    <name>Anthony Towns 2018-12-14 10:48:39</name>
  </author>
  <author>
    <name>Anthony Towns 2018-12-18 04:58:26</name>
  </author>
  <author>
    <name>Johnson Lau 2018-12-17 20:16:12</name>
  </author>
  <author>
    <name>Johnson Lau 2018-12-18 10:00:59</name>
  </author>
  <link href="bitcoin-dev/Dec_2018/016556_Schnorr-and-taproot-etc-upgrade.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016566_Schnorr-and-taproot-etc-upgrade.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016563_Schnorr-and-taproot-etc-upgrade.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016567_Schnorr-and-taproot-etc-upgrade.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Schnorr and taproot (etc) upgrade</title>
    <updated>2023-05-20T19:39:26.880055+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016556.html" rel="alternate"/>
    <summary>The article proposes changes to Bitcoin's protocol in a soft fork. The proposed changes include introducing 33-byte v1 witness addresses that encode a secp256k1 ECC point spendable either by a direct Schnorr signature or a script using witness data for the script with a taproot/merkle path to the script satisfying the taproot condition. Additionally, the author proposes replacing the ECDSA CHECKSIG/CHECKMULTISIG ops with new Schnorr ops, adding OP_MASK to support script masking via sighash, and making almost all currently invalid opcodes upgradeable with what the author calls "OP_SUCCESS" semantics. The email conversation between Russell O'Connor, Johnson Lau, and Anthony Towns on the bitcoin-dev mailing list discussed several topics related to script composition in Bitcoin. One topic was the proposal that for a script to succeed, the stack must be exactly empty. Another topic was popping the stack after OP_CLTV and OP_CSV. It was suggested that if we change the rule from "one true stack item" to "empty stack," popping the stack after CLTV/CSV would make more sense. However, some constructions like "CHECKSIGVERIFY CLTV" that avoid the DROP and work when you're expected to leave a true value on the stack won't work if the stack has to end up empty. The discussion also touched on the eltoo paper's trigger phase and the use of NOINPUT-commit-to-scriptPubKey variant in HTLC outputs. Finally, the need for simple OP_SUCCESS upgrades and their activation at the same time as schnorr/taproot/etc was proposed.The author's proposal includes other neat ideas such as re-enabling opcodes like CAT, MUL, XOR, etc, graftroot, g'root, cross-input signature aggregation, non-interactive half-signature aggregation, check-sig-of-msg-on-stack, push txdata, and other covenant-y things. However, the author suggests that these neat ideas can be left for later.The article also provides an example of how Eltoo would work in a taproot world.</summary>
    <published>2018-12-14T10:48:39+00:00</published>
  </entry>
</feed>
