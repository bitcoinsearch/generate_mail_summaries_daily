<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Continuing the discussion about noinput / anyprevout</title>
  <updated>2023-05-20T21:01:17.778975+00:00</updated>
  <author>
    <name>Anthony Towns 2019-10-05 10:06:15</name>
  </author>
  <author>
    <name>Anthony Towns 2019-10-01 15:59:29</name>
  </author>
  <author>
    <name>Anthony Towns 2019-10-03 01:47:58</name>
  </author>
  <author>
    <name>Anthony Towns 2019-10-01 14:45:48</name>
  </author>
  <link href="bitcoin-dev/Oct_2019/017367_Continuing-the-discussion-about-noinput-anyprevout.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017337_Continuing-the-discussion-about-noinput-anyprevout.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017341_Continuing-the-discussion-about-noinput-anyprevout.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2019/017334_Continuing-the-discussion-about-noinput-anyprevout.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Continuing the discussion about noinput / anyprevout</title>
    <updated>2023-05-20T21:01:17.779946+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-October/017367.html" rel="alternate"/>
    <summary>In a recent email exchange on the Bitcoin-dev mailing list, Christian Decker and AJ Towns discussed the usefulness of noinput/anyprevout style constructions. The discussion focused on the potential risks associated with these types of transactions, including the possibility of losing funds due to address reuse. One solution proposed was to use opt-in via pubkey prefix, which would only reveal that you have opted in when revealing the entire script. The use of meaningful prefixes on the taproot scriptpubkey could also help distinguish wallets. The conversation also touched on the importance of having a public testnet to demonstrate that theoretical attacks can be handled before deploying changes in a real-world setting. Additionally, the group discussed open questions around the usefulness of chaperone signatures, output tagging/explicit opt-in, and merging BIP-118 and bip-anyprevout proposals. While there is general agreement on the usefulness of noinput/anyprevout-style constructions, there is still some uncertainty around the risks involved.In a recent discussion on Lightning-dev, the proposal to remove `SIGHASH` from signatures and put it on public keys was made. The advantage of doing this is that it allows an address to be signed for only with an anyprevout signature. This feature is opt-in at the tapscript level. Receiving funds spent via an anyprevout signature does not involve any qualitatively new double-spending/malleability risks. Therefore, output tagging is unnecessary, and there is no need for users to mark anyprevout spends as "tainted" in order to wait for more confirmations than normal before considering those funds "safe". However, the proposal faces some challenges. Firstly, if you included the sighash as part of the scriptpubkey explicitly, that would lose some of the indistinguishability of taproot addresses, and be more expensive than having the sighash be in witness data. Secondly, the problems with `SIGHASH_NONE` and `SIGHASH_SINGLE` are not worse than using `SIGHASH_ALL` to pay to "1*G." Thirdly, the idea of making a new opcode or creating a new tapscript public key type is just a matter of encoding. The author proposes a public testnet where fake exchanges/merchants/etc and scheduled reorgs could be used to demo every weird noinput/anyprevout case anyone can think of. This way, the community can determine whether any extra code/tagging/whatever is needed to keep those fake exchanges/merchants from losing money. The result of this exercise can be documented in a wiki or paper so people can easily tell if anything obvious has been missed.</summary>
    <published>2019-10-05T10:06:15+00:00</published>
  </entry>
</feed>
