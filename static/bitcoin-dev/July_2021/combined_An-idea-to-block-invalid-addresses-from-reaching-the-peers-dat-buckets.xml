<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - An idea to block invalid addresses from reaching the peers.dat buckets</title>
  <updated>2023-05-21T03:19:09.417204+00:00</updated>
  <author>
    <name>Pieter Wuille 2021-07-13 00:54:29</name>
  </author>
  <author>
    <name>Ali Sherief 2021-07-12 23:33:16</name>
  </author>
  <link href="bitcoin-dev/July_2021/019266_An-idea-to-block-invalid-addresses-from-reaching-the-peers-dat-buckets.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019265_An-idea-to-block-invalid-addresses-from-reaching-the-peers-dat-buckets.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - An idea to block invalid addresses from reaching the peers.dat buckets</title>
    <updated>2023-05-21T03:19:09.417204+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019266.html" rel="alternate"/>
    <summary>Someone is spamming the bitcoin network with addr message pointing to invalid addresses and ports, which bloats the peers.dat and corresponding structure in memory. The peers.dat file and the structure in memory have a fixed size, so those are not a problem. Since peers.dat uses a custom record type which the author doesn't know how to parse, they weren't able to check specifics of IP addresses listed in there, but they believe they have a workaround to prevent this kind of thing from happening. The "addrman" database is organized into 1024 buckets with "new" addresses and 256 buckets with "tried" addresses. Each bucket consists of 64 positions, and each of those can hold 1 address. Along with the addresses, they remember where they originally heard about them (which IP). Each group of source IPs selects a subset of just 64 buckets (salted using a host-specific secret key), and inserts the newly received IPs in a position in a bucket in one of those if certain criteria are met. The author suggests changing the AddrDb updating functionality so that it does not add nodes that are unreachable. Such addresses can either be stored in a new, separate database-like file such as "ignore.dat", or they can be augmented in the peers.dat file under a new entry type. In both cases, the invalid nodes can be immediately flushed from memory to avoid processing them. To avoid blocking nodes which happened to go offline, the check won't be made if it's already in the buckets. In order to facilitate other nodes discovering blocked nodes, a new ZMQ message can be made that sends the node's list of ignored addresses. A new file or command-line/config option called "ignorelist" or something with a list of subnets that will *not* be read into the AddrDB buckets in any case, should also be introduced. This will work differently from the banlist, whose primary job is to block peers that send invalid messages, not peers that are not, and cannot, be unreachable in the first place.</summary>
    <published>2021-07-13T00:54:29+00:00</published>
  </entry>
</feed>
