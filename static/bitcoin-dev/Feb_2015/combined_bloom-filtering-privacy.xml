<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - bloom filtering, privacy</title>
  <updated>2023-05-19T19:49:38.702339+00:00</updated>
  <author>
    <name>Gregory Maxwell 2015-02-20 18:20:59</name>
  </author>
  <author>
    <name>Gregory Maxwell 2015-02-20 17:50:11</name>
  </author>
  <link href="bitcoin-dev/Feb_2015/007512_bloom-filtering-privacy.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007508_bloom-filtering-privacy.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - bloom filtering, privacy</title>
    <updated>2023-05-19T19:49:38.703336+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007512.html" rel="alternate"/>
    <summary>The discussion revolves around using a full node for merkle paths and transactions for addresses from the UTXO set in the relevant block. The term "UTXO set" is causing confusion as it refers to block-local data, not the complete verification state. Instead of that, there is a scriptpubkey bitmap per block that is committed, and users can request it with confidence. If there are hits, users can request the block with confidence that there was no censoring. It's possible to tree structure additional layers to the bitmap to trade off map size for false request overhead, but it's not clear how much of a win this would be. Additionally, it's possible to extract the txout list for the whole block and commit to that too, so users can request just the outputs and get a smaller, faithful copy. The approach needs a filter set with a lower FP rate. Larger filters mean higher baseline bandwidth, though when users do not reuse addresses and have more addresses than there are txouts in the block, the gap is narrower. The scheme relies on a committed bloom filter, not a committed UTXO set.</summary>
    <published>2015-02-20T18:20:59+00:00</published>
  </entry>
</feed>
