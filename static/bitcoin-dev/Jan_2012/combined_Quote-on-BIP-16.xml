<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Quote on BIP 16</title>
  <updated>2023-05-19T02:59:23.785061+00:00</updated>
  <author>
    <name>Gregory Maxwell 2012-01-29 05:19:44</name>
  </author>
  <author>
    <name>Gregory Maxwell 2012-01-29 08:14:06</name>
  </author>
  <link href="bitcoin-dev/Jan_2012/001087_Quote-on-BIP-16.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2012/001089_Quote-on-BIP-16.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Quote on BIP 16</title>
    <updated>2023-05-19T02:59:23.785061+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-January/001087.html" rel="alternate"/>
    <summary>In a conversation between Amir Taaki and Gavin Andresen, they discuss the length of Bitcoin addresses. Gavin states that he has seen a 70-byte long address without a P2SH scheme in place and asks if this is a mistake. However, Amir explains that P2SH prevents the need for long addresses. Pay to script hash only requires hashes to be between 128-256 bits in size, so there is no need for an address longer than that. Without some form of P2SH, you would have to use pay-to-script (P2S). This means having an address that encodes a full script specification for the sender to pay to, instead of just encoding its hash. As a result, these addresses would be much longer. The minimum size of a two-address involving encoded script would be on that order, but they get bigger quite quickly if you add more options to the script (actually 70 sounds quite small, it should be more like 100 for a minimum two pubkey script).However, P2S has several problems which might be considered important. Firstly, they are highly vulnerable to invisible substitution. Secondly, the sender is fully responsible for fees related to the enlarged transactions. Thirdly, they create another input vector for non-trivial data which must be inspected and validated, potentially presenting an attack surface. Lastly, they leave the complicated release rules in the transaction outputs. In a future world where many nodes prune output space is far more important than input space and it would make sense to require more fees for it because we're never sure how long it would need to be stored.Alan Reiner raises concerns about plain multisig being abused. However, it's important not to conflate multisig addresses and P2S with multisig output scripts in general. Of the issues raised, only the size of the potentially unprunable transaction outputs is an argument against multisig outputs which aren't getting packed up in addresses. P2SH is still better for escrow arrangements for two reasons. Firstly, reasonable anti-spam behavior by network participants may make it hard to make large output scripts. Secondly, P2S(H) lets you use a separate escrow-maker tool for clients paying into escrow without any knowledge or support of escrow transactions in that client. This uncoupling is important both for general "feature velocity" as well as providing a uniform feature set across Bitcoin services.</summary>
    <published>2012-01-29T05:19:44+00:00</published>
  </entry>
</feed>
