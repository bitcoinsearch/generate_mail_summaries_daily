<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP16/17 replacement</title>
  <updated>2023-05-19T03:03:01.477378+00:00</updated>
  <author>
    <name>Pieter Wuille 2012-02-01 10:02:08</name>
  </author>
  <author>
    <name>Gregory Maxwell 2012-01-31 17:45:14</name>
  </author>
  <link href="bitcoin-dev/Feb_2012/001156_BIP16-17-replacement.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2012/001147_BIP16-17-replacement.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP16/17 replacement</title>
    <updated>2023-05-19T03:03:01.477378+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-February/001156.html" rel="alternate"/>
    <summary>On January 31, 2012, Luke-Jr wrote that both BIP 16 and 17 are backward compatible enough that old clients can be used with each other. However, Andy Parkins raised questions regarding this, as the new transaction types may be rejected by old clients since they don't pass IsStandard(). Pieter clarified that IsStandard() is for accepting transactions into the memory pool, and non-standard transactions are verified when in the blockchain. BIP16/17 creates transactions that are valid when interpreted as old scripts, but previously-valid transactions become invalid. As long as a supermajority of miners enforce the new rules, everyone can keep using their old bitcoin client. A breaking change to the protocol requires all users to upgrade, or they will see a fork of the chain from before the first new-style transaction.The differences between BIP16 and BIP17 are technically obscure, and there is consensus among involved parties over it. Luke has been maintaining an opinion tracker page reflecting the views of core developers and people who have an informed opinion. There were discussions about concerns that BIP12 was too computationally powerful, and BIP16 became the isolated consensus path forward. However, Luke managed to build a workable alternative, and it now has some support other than himself. Bitcoin is a zero-trust system, and nodes validate things for themselves. A breaking change of the kind suggested by Andy Parkins would require a client update to make use of the new functionality, but old nodes will continue to validate things. The suggestion to increase the version number in transactions, dump the "scriptPubKey" field completely, replace it with "hashOfClaimingScript," and add an "unsignedParameters" array is pretty much fantasy. It is doubtful that a true breaking change can be pulled off in a way that people would trust upgrading to, at least not before the system is too big to make that kind of change.</summary>
    <published>2012-02-01T10:02:08+00:00</published>
  </entry>
</feed>
