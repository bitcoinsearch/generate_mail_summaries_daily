<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Draft BIP for Bloom filtering</title>
  <updated>2023-05-19T16:03:47.368228+00:00</updated>
  <author>
    <name>Pieter Wuille 2012-11-06 19:14:58</name>
  </author>
  <author>
    <name>Matt Corallo 2013-01-11 03:59:11</name>
  </author>
  <author>
    <name>Gregory Maxwell 2012-10-25 17:01:28</name>
  </author>
  <author>
    <name>Gregory Maxwell 2012-10-25 16:56:39</name>
  </author>
  <author>
    <name>Pieter Wuille 2012-11-27 21:10:23</name>
  </author>
  <author>
    <name>Matt Corallo 2012-11-21 18:38:37</name>
  </author>
  <author>
    <name>Matt Corallo 2013-01-16 15:00:47</name>
  </author>
  <author>
    <name>Gregory Maxwell 2013-02-06 16:45:13</name>
  </author>
  <author>
    <name>Gregory Maxwell 2012-10-26 14:34:06</name>
  </author>
  <author>
    <name>Gregory Maxwell 2012-10-26 14:17:04</name>
  </author>
  <author>
    <name>Matt Corallo 2012-10-24 19:00:33</name>
  </author>
  <author>
    <name>Pieter Wuille 2012-10-24 17:11:05</name>
  </author>
  <author>
    <name>Pieter Wuille 2012-10-24 16:22:56</name>
  </author>
  <author>
    <name>Pieter Wuille 2012-11-21 15:15:35</name>
  </author>
  <link href="bitcoin-dev/Nov_2012/001952_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2013/002121_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2012/001945_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2012/001944_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2012/002008_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2012/001965_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2013/002130_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2013/002141_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2012/001949_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2012/001947_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2012/001939_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2012/001937_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2012/001936_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2012/001964_Draft-BIP-for-Bloom-filtering.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Draft BIP for Bloom filtering</title>
    <updated>2023-05-19T16:03:47.368228+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-November/001952.html" rel="alternate"/>
    <summary>Pieter Wuille has implemented code for efficient representation of partial Merkle trees. The encoding/decoding algorithm uses a depth-first traversal of the tree, at each node outputting whether anything relevant is beneath, and if not, storing its hash and not descending into the children. Furthermore, some hard upper bounds on the size of the serialized structures are guaranteed. There are unit tests included to verify encoding and decoding, calculated merkle root matches, serialization/deserialization is an identity, and bounds on the size of the serialization are respected. Auto-expansion has been disabled, and a bugfix on the BCJ side was done.A wallet can now be synced using a bloom filtered chain. Pieter thinks that this work should go into 0.8. However, Gregory Maxwell states that he still doesn't understand what purpose the apparently gratuitous inefficiency of constantly resending common tree fragments serves. He also points out that the current design can cause massive overhead compared to pulling an unfiltered block and makes this filtering useless for applications which would select a small but not tiny subset of the transactions (e.g. 10%). Matt Corallo responds to Pieter's comments, stating that the 0xFFFFFFFF/(n-1)*i seed value seems intended to result in large bit differences between the different hash functionâ€™s.Pieter Wuille and Matt proposed a bloom filtering protocol extension, which was described in the draft BIP. Two comments were made regarding the seed values and implicitly created filters when sending filteradd without filterload. The server cannot be expected to make a reasonable guess how the client is going to use the filter, and the client still has to track how large the server-side filter grows anyway. Pieter suggested that the actual filter data in filterload can be made optional. If it is omitted, it's assumed to be all zeroes (though that would mean the size has to be specified). It was agreed that filteradd always requires an active filter and there would be little benefit for the large increase in complexity if a compressed bloom filter encoding is used to allow for small filter loads where you anticipate adding significantly more filter elements down the road.The developers discuss the limitations of the extension, such as limiting the number of matching transactions to 255 and the overhead required when matching almost everything in a block. They also discuss the design of the filter, including the seed value and filter parameters used. Pieter suggested that k1*i+k2*n+tweak is better than 0xFFFFFFFF/(n-1)*i seed value because it results in large bit differences between the different hash function's seeds. An algorithmic change was made to the way the hash function is computed quickly. Matt's latest code was tested by Andreas and seems to work correctly. He had to extend the client a bit to refresh the filter every 25k blocks because even with the extra flag, eventually, the filter degrades into uselessness, but it did still improve the situation quite a bit. It was unit-tested, reviewed by Mike Hearn several times, has an interoperable implementation that has also been tested by Andreas in a build of his smartphone app. It was requested that it be merged into 0.8.One developer, Mike Hearn, has proposed a new vulnerability in the protocol that could potentially allow for the wasting of bandwidth on all nodes forever with O(1) work. Another developer, Gavin Andresen, expresses concern about requiring serving/relaying nodes to keep track of which transactions they have or have not sent to their peers, as this could potentially lead to some kind of DoS attack. Andresen suggests requiring an extra 'inv' round-trip instead, but Hearn argues that this would require nodes to store each transaction that could be requested instead of just forwarding them. It is trivial to DoS the entire Bitcoin network today, but it hasn't ever happened. Altcoins have been attacked on things we fixed. For example, litecoin nodes were being run out of disk space through addr.dat flooding. The level of griefing is low, but part of the reason its been low is that it's probably harder to DOS attack bitcoin than people believe. In the reference client, a lot of work has gone into removing attacks with sublinear cost for the attackers.</summary>
    <published>2012-11-06T19:14:58+00:00</published>
  </entry>
</feed>
