<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for generalized MAST)</title>
  <updated>2023-05-20T04:00:44.312187+00:00</updated>
  <author>
    <name>Pieter Wuille 2017-09-22 22:09:07</name>
  </author>
  <author>
    <name>Johnson Lau 2017-09-21 08:02:42</name>
  </author>
  <author>
    <name>Johnson Lau 2017-09-21 03:58:05</name>
  </author>
  <author>
    <name>Johnson Lau 2017-09-20 05:13:04</name>
  </author>
  <author>
    <name>Johnson Lau 2017-09-21 17:38:01</name>
  </author>
  <author>
    <name>Mark Friedenbach 2017-09-19 07:33:54</name>
  </author>
  <link href="bitcoin-dev/Sept_2017/015044_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015033_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015031_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015026_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015035_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/015025_cleanstack-alt-stack-softfork-improvements-Was-Merkle-branch-verification-tail-call-semantics-for-generalized-MAST-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - cleanstack alt stack &amp; softfork improvements (Was: Merkle branch verification &amp; tail-call semantics for generalized MAST)</title>
    <updated>2023-05-20T04:00:44.312187+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/015044.html" rel="alternate"/>
    <summary>The email thread discussed various topics related to Bitcoin development, including the issue of variable size increase in signatures. Sergio Demian Lerner suggested three possibilities to address this issue, such as abandoning strict DER encoding and allowing zero-padding of signatures. Johnson Lau raised an issue with OP_RETURNTRUE not working well with signature aggregation, while Mark Friedenbach suggested separating two separate version values that gate functionality in script or whatever else is used by that witness type. Luke Dashjr proposed replacing all NOPs and otherwise-unallocated opcodes with a new OP_RETURNTRUE implementation for softforking in any new opcode.The article discussed the technical aspects of sigagg, a softfork that enables signature aggregation for transactions. The new OP_CHECKSIG had two arguments that returned different values based on sig size, while the aggregator combined these pairs to obtain aggkey and aggmsg and verified them against aggsig. However, old clients were not able to understand it, leading to a hard fork if we softfork OP_RETURNTRUE to something else, even as OP_NOP11 - new clients sent the (key, msg) pair to the aggregator, while old clients stopped at OP_RETURNTRUE and did not send the pubkey to the aggregator.One approach to solve this issue was to create many OP_DROPs and OP_2DROPs so new VERIFY operations could pop the stack. Another approach was to use a new script version for every new non-verify type operation, but this may lead to multiple versions, and signatures from different versions cannot be aggregated. Furthermore, tail-call semantics could still be maintained if the alt stack is used for transferring arguments to the policy script, although cleanstack was introduced as a consensus rule to prevent a potential denial of service vulnerability where a third party could intercept any transaction broadcast and arbitrarily add data to the witness stack, since witness data is not covered by a checksig.Cleanstack accomplishes this by passing through all realistic scripts, remaining on the stack, and violating the rule. Extra items on the altstack can only arrive there purposefully as an action of the script itself, not a third-party malleation of witness data.</summary>
    <published>2017-09-22T22:09:07+00:00</published>
  </entry>
</feed>
