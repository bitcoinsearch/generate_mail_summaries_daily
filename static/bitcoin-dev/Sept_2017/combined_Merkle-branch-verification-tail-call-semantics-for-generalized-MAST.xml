<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Merkle branch verification &amp; tail-call semantics for generalized MAST</title>
  <updated>2023-05-20T03:44:21.793268+00:00</updated>
  <author>
    <name>Johnson Lau 2017-09-12 08:55:59</name>
  </author>
  <author>
    <name>Johnson Lau 2017-09-08 09:21:22</name>
  </author>
  <link href="bitcoin-dev/Sept_2017/014984_Merkle-branch-verification-tail-call-semantics-for-generalized-MAST.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/014962_Merkle-branch-verification-tail-call-semantics-for-generalized-MAST.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Merkle branch verification &amp; tail-call semantics for generalized MAST</title>
    <updated>2023-05-20T03:44:21.793268+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014984.html" rel="alternate"/>
    <summary>Mark Friedenbach, a Bitcoin Core developer, has proposed two new script features for the bitcoin protocol through soft-fork activation. The first feature is MERKLE-BRANCH-VERIFY (MBV), which allows script authors to commit to a pre-determined set of values in the scriptPubKey without revealing unused elements. This enhances privacy and results in smaller script sizes. The second feature is tail-call execution semantics, which enables a single level of recursion into a subscript, providing similar properties to P2SH but with more flexibility. These features can enable tree signatures, a generalized MAST, and privacy and fungibility improvements for counter-signing wallet/vault services.Friedenbach has acknowledged that tail-call execution semantics require "unclean stack," which is invalid in BIP141. He suggests that a new version of the witness script or OP_EVAL might be needed. Additionally, he suggests that SigOp counting needs to be reconsidered, as the current method limits the number of CHECKSIGs potentially encountered in script execution rather than the number of signature operations necessary for validating a block. Friedenbach recommends a global limit that combines all the factors with appropriate coefficients and suggests committing maximum resources consumed by validation of the spend of the coin by using them during block validation. He also proposes re-evaluating whether SigOps should be counted other than for legacy consensus rule compliance.Friedenbach believes that the implementation of these features is simple enough, and the use cases compelling enough, to roll out BIP 8/9 before the end of the year. Witness script versioning is fully compatible with P2SH and BIP173, so existing wallets will have no hurdle to pay to BIP114, and it should be completely transparent to them. For code complexity, the minimal BIP114 could be really simple, like hiding scripts in a hash. A revised BIP114 allows users to add extra scripts when spending a coin.</summary>
    <published>2017-09-12T08:55:59+00:00</published>
  </entry>
</feed>
