<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Cut-through propagation of blocks</title>
  <updated>2023-05-19T18:56:39.706268+00:00</updated>
  <author>
    <name>Gregory Maxwell 2014-05-24 23:16:43</name>
  </author>
  <author>
    <name>Gregory Maxwell 2014-05-25 09:51:06</name>
  </author>
  <author>
    <name>Gregory Maxwell 2014-05-25 00:14:59</name>
  </author>
  <link href="bitcoin-dev/May_2014/005898_Cut-through-propagation-of-blocks.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2014/005905_Cut-through-propagation-of-blocks.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2014/005901_Cut-through-propagation-of-blocks.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Cut-through propagation of blocks</title>
    <updated>2023-05-19T18:56:39.707267+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-May/005898.html" rel="alternate"/>
    <summary>In a discussion focused on reducing the orphan risk carried by larger blocks, Ashley Holman suggested some techniques to speed up block propagation. According to him, the current method of store-and-forward causes higher latency for larger blocks. Several improvements could be made before complex changes like cut-through-forwarding that change the protocol. Amongst them, reference software has a 100ms sleep in p2p message processing which could be replaced with a semaphore, and nodes becoming bandwidth overloaded could adapt their concurrent connection counts down, and ones that are underloaded could accept more connections. Relaying to multiple peers could be done in parallel, and the order in which peers are relayed to could be adapted to place more apparently useful and faster peers first.Luke-Jr had implemented cut through behavior previously, but absent those other network processing improvements, it didn't appear to help. If one wants to optimize in this space, there are fancier things that can be done to further reduce latency and increase efficiency. However, it is better to do these things as a separate protocol. There is no need to have Bitcoin transport all using a single protocol, and we can get better robustness and feature velocity if there are a couple protocols in use.Mike Hearn responded to Ashley's suggestion and mentioned that although it is somewhat appealing, he doesn't think it would improve feature velocity. He thinks that having to implement features twice in two protocols would slow things down quite a bit. Alan Reiner pointed out that the most important change is modifying the way Bitcoin Core prioritizes blocks. Right now, it uses the first full block verified. Instead, it should consider the first valid header received as the highest priority but only mine on it once it has done full verification of the content. This opens an attack where as soon as you find a block, you announce the header to the world and then delay announcing the block content. You can continue to mine on the block but no one else can.If miners are concerned about that 1-3 second gap, they should perhaps focus on making sure the tx they are mining is well-propagated already so that most of the network has most of the transactions already in their memory pool by the time their block is mined. With an alternative transport protocol, assuming the content has already been relayed, a block could be sent in a couple back-to-back UDP packets. So very similar latency could be achieved without doing anything that might increase the motivations for miners to misbehave.</summary>
    <published>2014-05-24T23:16:43+00:00</published>
  </entry>
</feed>
