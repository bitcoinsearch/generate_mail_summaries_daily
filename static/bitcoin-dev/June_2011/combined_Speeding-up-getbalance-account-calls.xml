<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Speeding up "getbalance &lt;account&gt;" calls</title>
  <updated>2023-05-26T18:31:39.806005+00:00</updated>
  <author>
    <name>John Smith 2011-06-24 05:30:54</name>
  </author>
  <author>
    <name>jan at uos.de 2011-06-23 21:51:43</name>
  </author>
  <author>
    <name>jan at uos.de 2011-07-04 11:40:28</name>
  </author>
  <author>
    <name>Jan Vornberger 2011-07-03 16:29:05</name>
  </author>
  <author>
    <name>jan at uos.de 2011-07-04 11:40:28</name>
  </author>
  <author>
    <name>John Smith 2011-06-24 05:30:54</name>
  </author>
  <author>
    <name>Jan Vornberger 2011-07-03 16:29:05</name>
  </author>
  <author>
    <name>jan at uos.de 2011-07-04 11:40:28</name>
  </author>
  <author>
    <name>Jan Vornberger 2011-07-03 16:29:05</name>
  </author>
  <author>
    <name>jan at uos.de 2011-06-23 21:51:43</name>
  </author>
  <author>
    <name>jan at uos.de 2011-06-23 21:51:43</name>
  </author>
  <author>
    <name>John Smith 2011-06-24 05:30:54</name>
  </author>
  <link href="bitcoin-dev/June_2011/000063_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000062_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000128_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000127_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000128_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000063_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000127_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000128_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000127_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000062_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000062_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2011/000063_Speeding-up-getbalance-account-calls.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Speeding up "getbalance &lt;account&gt;" calls</title>
    <updated>2023-05-26T18:31:39.806129+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-June/000063.html" rel="alternate"/>
    <summary>Jan Vornberger, the founder of Instawallet, faced a bottleneck problem with "getbalance" taking too much time to complete as bitcoind runs through all transactions each time anew to compute the balance. He sought advice on how to improve this issue and posted on the Bitcoin mailing list in 2011. John Smith suggested scanning the wallet every time a block comes in or something else changes in the blockchain, which could be done in amortized linear time using a hash_map to reduce the API's response time.Jan implemented this suggestion and created a list of all account balances every time a new block came in or a transaction affecting his wallet appeared. The list was stored in a map, and it worked well. However, there were issues with “sendfrom” triggering a rebuild of the cache and not returning before the rebuild was complete. To solve this, Jan changed the approach slightly, and a complete rebuild of the cache only happened on new blocks, whereas, on new wallet transactions, the cache was adjusted incrementally.Jan shared his code on a Github branch for anyone who might need this solution. However, the cache wouldn't work correctly with the RPC command "move" as he hadn't implemented the necessary adjustments. Another suggestion to improve the speed of bitcoind in computing the balance for relevant transactions is to scan the wallet every time a block comes in or changes in the blockchain and accumulate balances for all accounts using a hash_map in amortized linear time. This approach reduces the API response time to a predictable, short time and reduces the risk of bugs compared to incremental caching. It also handles block chain reorganizations without issue.</summary>
    <published>2011-06-24T05:30:54+00:00</published>
  </entry>
</feed>
