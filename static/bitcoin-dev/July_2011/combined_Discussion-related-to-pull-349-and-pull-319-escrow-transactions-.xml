<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Discussion related to pull 349 and pull 319 (escrow transactions)</title>
  <updated>2023-05-19T02:40:24.730118+00:00</updated>
  <author>
    <name>Gregory Maxwell 2011-08-04 20:35:53</name>
  </author>
  <author>
    <name>Gregory Maxwell 2011-07-23 23:39:13</name>
  </author>
  <link href="bitcoin-dev/Aug_2011/000298_Discussion-related-to-pull-349-and-pull-319-escrow-transactions-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2011/000217_Discussion-related-to-pull-349-and-pull-319-escrow-transactions-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Discussion related to pull 349 and pull 319 (escrow transactions)</title>
    <updated>2023-05-19T02:40:24.730118+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-August/000298.html" rel="alternate"/>
    <summary>In an email exchange, the issue of mining non-standard transactions was discussed. While there is a hope that more than 30% of mining power could be upgraded to mine these transactions in under an hour, it's not just about mining power; propagation is also a concern. The current focus on maturity and bug fixes is likely to delay the full patch, but the IsStandard part is uncontroversial and could go in quickly. Therefore, it was suggested to split the patch into two pull requests: one for the IsStandard change and another for the full escrow feature set.Pull 349 implements a multiple signature escrowed transaction. This implementation needs testing and discussion before it can be added to the client. One challenge is that it requires a new transaction type, which won't be deployable until after an updated isStandard is widely used in the network. Hence, it makes sense to separate the IsStandard part of the patch and get it out in 0.4.However, Pull 349 exposes an issue with multisig validation, where a script can be coded in multiple ways due to redundancy in script length coding opcodes. A candidate fix to this is excluding the length opcodes from the comparison, although it carries a risk of creating differences in how nodes validate transactions leading to lasting forks. Another way of fixing this would be to define that OP_PUSHDATA* cannot be used to push smaller lengths that could be more efficiently encoded with direct length opcodes. However, this may carry no severe split risk. The third way of fixing this would be to change the templating code to ensure it codes the template the same way the original was coded, but this seems tricky to implement and validate.</summary>
    <published>2011-08-04T20:35:53+00:00</published>
  </entry>
</feed>
