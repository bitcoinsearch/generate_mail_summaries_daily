<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Compact Block Relay BIP</title>
  <updated>2023-05-19T23:25:37.799309+00:00</updated>
  <author>
    <name>Matt Corallo 2016-05-02 22:13:22</name>
  </author>
  <author>
    <name>Matt Corallo 2016-05-18 01:49:10</name>
  </author>
  <author>
    <name>Gregory Maxwell 2016-05-10 10:07:27</name>
  </author>
  <author>
    <name>Pieter Wuille 2016-05-09 17:06:06</name>
  </author>
  <author>
    <name>Gregory Maxwell 2016-05-09 10:43:02</name>
  </author>
  <author>
    <name>Matt Corallo 2016-05-06 03:09:14</name>
  </author>
  <author>
    <name>Matt Corallo 2016-05-11 01:12:32</name>
  </author>
  <author>
    <name>Gregory Maxwell 2016-05-10 02:12:03</name>
  </author>
  <author>
    <name>Matt Corallo 2016-05-08 03:24:22</name>
  </author>
  <author>
    <name>Gregory Maxwell 2016-05-03 05:02:28</name>
  </author>
  <link href="bitcoin-dev/May_2016/012624_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012719_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012651_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012645_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012639_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012627_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012661_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012648_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012630_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012625_Compact-Block-Relay-BIP.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Compact Block Relay BIP</title>
    <updated>2023-05-19T23:25:37.799309+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012624.html" rel="alternate"/>
    <summary>The Bitcoin network is implementing a new feature called compact block relay in order to reduce the amount of on-wire data during block relaying. This design specification aims to limit the on wire bytes during block relay and can be found on GitHub as a BIP proposal. The protocol is designed to be used in two ways, depending on the peers and bandwidth available: high-bandwidth mode, which may only be enabled for a few of their peers, and low-bandwidth mode.To achieve this, several new data structures are added to the P2P network to relay compact blocks: PrefilledTransaction, HeaderAndShortIDs, BlockTransactionsRequest, and BlockTransactions. A new variable-length integer encoding is introduced for use in these data structures. Short transaction IDs are used to represent a transaction without sending a full 256-bit hash. They are calculated by single-SHA256 hashing the block header with the nonce appended in little-endian, XORing each 8-byte chunk of the double-SHA256 transaction hash with each corresponding 8-byte chunk of the hash from the previous step, and adding each of the XORed 8-byte chunks together (in little-endian) iteratively to find the short transaction ID.Historically, the Bitcoin P2P protocol has not been very bandwidth efficient for block relay. Every transaction in a block is included when relaying, even though a large number of the transactions in a given block are already available to nodes before the block is relayed. This causes significant outbound bandwidth spikes for some nodes. Decreasing the bandwidth used during block relay is very useful for many individuals running nodes.Nodes should send a sendcmpct message to all appropriate peers to reduce their outbound bandwidth usage by allowing their peers to request compact blocks instead of full blocks. Nodes with limited inbound bandwidth should request blocks using MSG_CMPCT_BLOCK/getblocktxn requests, when possible. The compact block relay protocol is designed to reduce block relay time by saving wire bytes. Nodes are expected to be able to relay blocks without the extra getblocktxn/blocktxn round-trip at least 90% of the time, and with a smart compact-block-announcement policy, it is expected that this work might allow blocks to be relayed between nodes in 0.5*RTT instead of 1.5*RTT at least 75% of the time.The proposed protocol is about as simple as you can get while retaining some reasonable collision resistance. The Short transaction ID calculation is designed to take absolutely minimal processing time during block compaction to avoid introducing serious DoS vulnerabilities. The work is based hugely on a protocol recommendation written by Greg several years ago.Rusty Russell suggests using variable-length IDs to significantly narrow the possibilities for a block by sending the min-fee-per-kb and a list of "txs in my mempool which didn't get in" and "txs which did despite not making the fee-per-kb". However, Peter R notes that there are approximately 2^63 possible pairs in a set of 2^32 transactions, which may require approximately 2^32 computation to find two 64-bit hashes that collide. Salting the hash eliminates this issue, and per-source randomization of the hash ensures that when a rare chance collision happens it only impacts a single node at a time.</summary>
    <published>2016-05-02T22:13:22+00:00</published>
  </entry>
</feed>
