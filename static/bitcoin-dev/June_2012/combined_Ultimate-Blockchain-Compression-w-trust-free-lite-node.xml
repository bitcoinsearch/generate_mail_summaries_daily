<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Ultimate Blockchain Compression w/ trust-free lite node</title>
  <updated>2023-05-19T03:52:09.014602+00:00</updated>
  <author>
    <name>Gregory Maxwell 2012-06-21 22:02:27</name>
  </author>
  <author>
    <name>Gregory Maxwell 2012-06-19 17:59:04</name>
  </author>
  <link href="bitcoin-dev/June_2012/001625_Ultimate-Blockchain-Compression-w-trust-free-lite-node.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2012/001612_Ultimate-Blockchain-Compression-w-trust-free-lite-node.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Ultimate Blockchain Compression w/ trust-free lite node</title>
    <updated>2023-05-19T03:52:09.014602+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-June/001625.html" rel="alternate"/>
    <summary>In a conversation between Mike Koss and Alan Reiner, it was discussed that pruning spent transactions from an old block is not the only thing being talked about. Rather, commitments to the state of unspent transactions are being discussed which would allow memoryless nodes to engage in full validation without having to trust anything with the help of some untrusted non-memoryless peers. Furthermore, there was talk about being able to securely initialize new pruned nodes (not memoryless but reduced memory) without exposing them to the old history of the chain. This is possible without substantially degrading the full node security model, but it requires a new data structure for managing these trees of unspent transactions in a secure, scalable, and DOS resistant manner.It was also discussed whether adopting a more complex data structure than the merkle tree would make sense for including in the bitcoin protocol, to which the answer was yes. Although it is not an ultra short term thing.Alan Reiner expressed his concern about how one app developer updating their RB tree code has caused significant portions of the network to not agree on the correct root. This highlights how good comprehensive tests and a well-specified algorithm are important. The tree update algorithm would be normative in that scheme. He suggests using a PATRICIA tree/trie as it is an order-of-magnitude more provable than libJudy trees.</summary>
    <published>2012-06-21T22:02:27+00:00</published>
  </entry>
</feed>
