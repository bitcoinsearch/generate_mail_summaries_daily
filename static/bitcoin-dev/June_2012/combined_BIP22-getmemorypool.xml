<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP22/getmemorypool</title>
  <updated>2023-05-19T01:14:12.721496+00:00</updated>
  <author>
    <name>Pieter Wuille 2012-06-10 09:03:58</name>
  </author>
  <author>
    <name>Pieter Wuille 2012-06-12 10:50:40</name>
  </author>
  <author>
    <name>Pieter Wuille 2012-06-10 14:18:47</name>
  </author>
  <link href="bitcoin-dev/June_2012/001516_BIP22-getmemorypool.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2012/001525_BIP22-getmemorypool.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2012/001517_BIP22-getmemorypool.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP22/getmemorypool</title>
    <updated>2023-05-19T01:14:12.721496+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-June/001516.html" rel="alternate"/>
    <summary>Pieter Wuille, a developer of Bitcoin, has expressed his opinion on the getmemorypool/BIP22 pull request by Luke. He believes that having a stable and flexible API for negotiating block generation is important to be standardized. However, he thinks that too few people understand all the details of BIP22 to judge their necessity. Pieter suggests that the standard should not be more complex than necessary and its purpose and intended use cases should be clear. Regarding the block template, Pieter questions why the full transactions are sent (serialized in hex) in templates and submissions. He suggests transferring only txids as clients will rarely care about the actual transactions. Pieter also believes that there are too many optional features in the standard which adds unnecessary complexity to clients. He suggests simplifying the standard by limiting the API to the way of working where miners are allowed to modify only required coinbase outputs and put the required part of the coinbase input in the template. In addition, Pieter argues that noncerange limiting adds unnecessary complexity to clients. He recommends putting a minimum and maximum timestamp in the template because anything in between is valid. For transactions/add, Pieter asks what the use case is. He suggests standardizing on having all transactions be removable except those marked 'required'. For prevblock, he believes that one getmemorypool per new block shouldn't be a problem so do a longpoll instead of having the client able to modify prevblock themselves.In summary, Pieter would like to see the standard simplified. He suggests creating a new block template with specific fields containing bits, previousblockhash, version, curtime, maxtimeoff, expires, sigoplimit, sizelimit, subsidy, coinbaseaux, coinbaseoutputs, and transactions. He also suggests submitting an object containing a hex serialized block header, hex serialized coinbase transaction, and a list of txids. Proof of work is checked last. Pieter believes that too few people understand all the details of BIP22 (or don't care enough) to judge their necessity. Pieter suggests that the standard must not be more complex than necessary, making it as easy as possible to write either servers or clients for it, and its purpose and intended use cases must be clear. The subrequests are template, proposal, and submit. Regarding the block template, Pieter wonders if there is a particular reason for sending the full transactions (serialized in hex) both in templates and submissions. My suggestion would be to just transfer txids - if the client is interested in the actual transactions, we have the gettransaction RPC call already.He also asks if there are any important use cases he's missing.</summary>
    <published>2012-06-10T09:03:58+00:00</published>
  </entry>
</feed>
