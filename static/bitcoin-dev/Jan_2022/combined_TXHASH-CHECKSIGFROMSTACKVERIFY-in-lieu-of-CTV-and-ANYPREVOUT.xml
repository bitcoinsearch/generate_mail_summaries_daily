<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - TXHASH + CHECKSIGFROMSTACKVERIFY in lieu of CTV and ANYPREVOUT</title>
  <updated>2023-05-22T16:53:55.446503+00:00</updated>
  <author>
    <name>Anthony Towns 2022-02-01 01:16:39</name>
  </author>
  <author>
    <name>Anthony Towns 2022-01-31 02:18:52</name>
  </author>
  <author>
    <name>Anthony Towns 2022-01-28 14:17:40</name>
  </author>
  <author>
    <name>Anthony Towns 2022-01-28 01:34:36</name>
  </author>
  <author>
    <name>Anthony Towns 2022-02-17 14:27:27</name>
  </author>
  <link href="bitcoin-dev/Feb_2022/019845_TXHASH-CHECKSIGFROMSTACKVERIFY-in-lieu-of-CTV-and-ANYPREVOUT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2022/019840_TXHASH-CHECKSIGFROMSTACKVERIFY-in-lieu-of-CTV-and-ANYPREVOUT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2022/019825_TXHASH-CHECKSIGFROMSTACKVERIFY-in-lieu-of-CTV-and-ANYPREVOUT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2022/019819_TXHASH-CHECKSIGFROMSTACKVERIFY-in-lieu-of-CTV-and-ANYPREVOUT.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2022/019920_TXHASH-CHECKSIGFROMSTACKVERIFY-in-lieu-of-CTV-and-ANYPREVOUT.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - TXHASH + CHECKSIGFROMSTACKVERIFY in lieu of CTV and ANYPREVOUT</title>
    <updated>2023-05-22T16:53:55.446503+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019845.html" rel="alternate"/>
    <summary>The Bitcoin-dev mailing list recently had a discussion about the limitations of blockchain assembly language and the need for simplicity in creating general reusable components for Bitcoin Script. Members suggested the usefulness of CSFSV, but some thought it might not be enough to allow for very interesting programs on Bitcoin Script yet.Another topic of discussion was the usefulness of TXHASH, which generates hash values based on transaction data and is more flexible than CTV. However, there is a debate on whether a higher-level language is needed for blockchain operations rather than small generic pieces of code.The proposal of a TXHASH opcode that can be used for composition and analysis purposes was also discussed. The conversation revolved around implementing SIGHASH_GROUP, with suggestions made for new opcodes such as POP_SIGDATA and SIGHASH_NO_TX_DATA_AT_ALL.However, the author suggests prioritizing CAT, CHECKSIGFROMSTACK, tx introspection, and better maths as they would be better as part of a more thorough language overhaul. The discussion concludes with the author questioning whether to invest in Simplicity or gradually turn script into a more flexible language.</summary>
    <published>2022-02-01T01:16:39+00:00</published>
  </entry>
</feed>
