<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Analysis of Bech32 swap/insert/delete detection and next steps</title>
  <updated>2023-05-20T21:22:48.739538+00:00</updated>
  <author>
    <name>Pieter Wuille 2019-12-09 22:31:13</name>
  </author>
  <author>
    <name>Pieter Wuille 2019-12-10 06:36:20</name>
  </author>
  <link href="bitcoin-dev/Dec_2019/017521_Analysis-of-Bech32-swap-insert-delete-detection-and-next-steps.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017523_Analysis-of-Bech32-swap-insert-delete-detection-and-next-steps.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Analysis of Bech32 swap/insert/delete detection and next steps</title>
    <updated>2023-05-20T21:22:48.739538+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-December/017521.html" rel="alternate"/>
    <summary>The author has written a detailed analysis of Bech32's detection abilities when it comes to substitution errors, swapping of characters, insertions and deletions. They found that the only deviation from the expected at-most-1-in-a-billion failure to detect chance is when you "insert or delete a 'q' right before a final 'p'". Changing one constant in Bech32 would resolve this issue without affecting error detection for other classes of errors. The author recommends updating BIP173 to include the insertion weakness as an erratum and amending segwit addresses to be restricted to only length 20 or 32. They also suggest defining a variant of Bech32 with the modified constant so that non-BIP173 uses of Bech32 can choose a non-impacted version if they worry about this class of errors. If there is a need for non-32-byte witness programs in the medium term, they recommend defining an updated segwit address scheme that uses the modified Bech32 variant. The author believes that the impact on production systems will be minimal using the above recommendations. In response to questions, the author clarifies that updating BIP173 does not modify anything about its implementation, only adds this as an additional erratum section. The restriction to size 20 or 32 would only semantically change anything for version 1 through 16. They recommend having two variants of checksum - the current Bech32 checksum and the modified Bech32 checksum - and supporting both variants while flagging or signaling some deprecation warning if the current Bech32 checksum was detected. It would depend on the application and their tolerance to errors whether they should use the modified Bech32 or not.</summary>
    <published>2019-12-09T22:31:13+00:00</published>
  </entry>
</feed>
