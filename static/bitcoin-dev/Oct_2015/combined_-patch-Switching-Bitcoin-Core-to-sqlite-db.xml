<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [patch] Switching Bitcoin Core to sqlite db</title>
  <updated>2023-05-19T22:21:16.865967+00:00</updated>
  <author>
    <name>Gregory Maxwell 2015-10-30 03:35:33</name>
  </author>
  <author>
    <name>Gregory Maxwell 2015-11-15 03:30:45</name>
  </author>
  <author>
    <name>Gregory Maxwell 2015-11-15 02:10:43</name>
  </author>
  <author>
    <name>Gregory Maxwell 2015-11-15 01:08:16</name>
  </author>
  <author>
    <name>Gregory Maxwell 2015-10-30 04:28:47</name>
  </author>
  <author>
    <name>Gregory Maxwell 2015-10-29 08:17:27</name>
  </author>
  <link href="bitcoin-dev/Oct_2015/011635_-patch-Switching-Bitcoin-Core-to-sqlite-db.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2015/011767_-patch-Switching-Bitcoin-Core-to-sqlite-db.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2015/011762_-patch-Switching-Bitcoin-Core-to-sqlite-db.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2015/011760_-patch-Switching-Bitcoin-Core-to-sqlite-db.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2015/011636_-patch-Switching-Bitcoin-Core-to-sqlite-db.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2015/011633_-patch-Switching-Bitcoin-Core-to-sqlite-db.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [patch] Switching Bitcoin Core to sqlite db</title>
    <updated>2023-05-19T22:21:16.865967+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011635.html" rel="alternate"/>
    <summary>In a series of email exchanges among developers, the discussion revolved around the issue of UTXO storage. One developer suggested that users with resources should be allowed to operate big iron databases. However, this idea did not receive much support as it was deemed lacking in value and impractical for various reasons.Another developer argued that the technical distinction between Type 1 and Type 2 consensus failures was not clear, although there are known rules in the Bitcoin system that must be followed to maintain consistency between all nodes. He cited examples of other modern systems of money where funds can be confiscated via external authority, and economic controls exist to regulate the supply of money for the good of the economy. The fear that one node might say "valid" while another node says "I don't know" was also discussed. Finally, the developers agreed that errors in some cases are undetectable, while in others, they can be caught if one is vigilant enough.In response to a question about how nodes with different database technologies might determine different answers to whether a given transaction is valid or invalid, a software developer explained that databases sometimes have errors which can cause them to fail to return records or to return stale data. If those errors exist, consistency must be maintained and fixing the bug can cause a divergence in consensus state that could open users up to theft.The developer gave an example of such a bug in leveldb, which had to be fixed in an orderly manner to avoid causing a fork in the consensus state. The developer further explained that it is not unreasonable to have more than one implementation of something like the UTXO database, but great care is required around the specifics. Bitcoin consensus implements a mathematical function that defines the operation of the system, and all systems must agree for the state to not diverge and permit double-spends.With the cost in mind, one must also consider that the UTXO database is an opaque compressed representation, and access to the consensus UTXO database is not helpful for blockchain analysis interfaces. Regarding a suggestion to outsource the data management part of the UTXO database to the already existing database world, the developer clarified that this is not a database in an ordinary sense.The bitcoin core consensus engine requires a highly optimized ultra-compact data structure to perform the lookups for coin existence, and the data stored is highly compressed and very specialized. The backend can be swapped out for something else that provides the same properties, but doing so does not give any inspection or analytics capabilities. Systems that offer such capabilities require databases taking hundreds of gigabytes of storage and take days to weeks to import the network data, making them unsuitable for consensus use in the system for space efficiency, performance, and consensus consistency reasons.</summary>
    <published>2015-10-30T03:35:33+00:00</published>
  </entry>
</feed>
